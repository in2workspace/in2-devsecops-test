plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.sonarqube' version '5.0.0.4638'
	id 'jacoco'
	id 'checkstyle'
	id 'org.owasp.dependencycheck' version '9.1.0'
	id 'com.github.ben-manes.versions' version "0.51.0"
	id 'se.patrikerdes.use-latest-versions' version '0.2.18'
}

group = 'com.example'
version = '0.3.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

checkstyle {
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

checkstyleMain {
	source ='src/main/java'
}

checkstyleTest {
	source ='src/test/java'
}

sonar {
	properties {
		property 'sonar.projectName', 'DevSecOps Test'
		property "sonar.projectKey", "in2workspace_in2-devsecops-test"
		property "sonar.organization", "in2workspace"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.coverage.exclusions',
				"src/main/java/com/example/demo/DemoApplication.java"
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('compileJava') {
	inputs.files(tasks.named('processResources'))
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	dependsOn(tasks.test)
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir('jacocoHtml'))
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"src/main/java/es/in2/wallet/WalletApiApplication.java"
			])
		}))
	}
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		isNonStable(it.candidate.version)
	}
}

tasks.register('printVersion') {
	doLast {
		println version
	}
}

tasks.register('printProjectName') {
	doLast {
		println rootProject.name
	}
}
